# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190RETyLNzvu4xN5x1v6Q4rHB9edlq3uP
"""

import nltk
nltk.download('vader_lexicon')

import random
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk

# Ensure you have the NLTK's VADER lexicon
nltk.download('vader_lexicon')

class MentorBot:
    def __init__(self):
        self.user_info = {}
        self.sia = SentimentIntensityAnalyzer()

    def greet(self):
        greetings = [
            "Hello! I'm here to support you on your journey.",
            "Hey there! How can I help you today?",
            "Hi! I'm here to listen and assist you."
        ]
        return random.choice(greetings)

    def get_user_name(self):
        if 'name' not in self.user_info:
            self.user_info['name'] = input("What should I call you? ")
        return f"Nice to meet you, {self.user_info['name']}!"

    def respond_to_emotion(self, text):
        sentiment_score = self.sia.polarity_scores(text)['compound']
        if sentiment_score >= 0.5:
            response = "I'm glad you're feeling positive! Let me know how I can assist you further."
        elif sentiment_score <= -0.5:
            response = "It sounds like things might be challenging. I'm here to support you however you need."
        else:
            response = "Thanks for sharing. I'm here to provide any support or advice you need."
        return response

    def deliver_feedback(self, feedback, delivery_preference="constructive"):
        feedback_responses = {
            "constructive": f"I have some constructive feedback for you: {feedback}. Remember, feedback is here to help you grow.",
            "supportive": f"Here’s something I think could help you shine even more: {feedback}. You’re already doing so well!",
            "humor": f"So, funny story—{feedback}. Keep up the great work, you're making strides!"
        }
        return feedback_responses.get(delivery_preference, "constructive")

    def mentor_session(self):
        print(self.greet())
        print(self.get_user_name())

        while True:
            user_input = input("Tell me what’s on your mind, or type 'exit' to end the session: ")

            if user_input.lower() == 'exit':
                print("I'm always here if you need to chat again. Take care!")
                break

            # Respond based on sentiment
            print(self.respond_to_emotion(user_input))

            # Ask if user wants feedback delivery in a specific style
            feedback = "Your recent work shows great potential, but you might want to focus on improving X."
            print("How would you like feedback delivered? Options: 'constructive', 'supportive', 'humor'")
            feedback_style = input("Choose a style: ")
            print(self.deliver_feedback(feedback, feedback_style))

bot = MentorBot()   # Create an instance of the chatbot
bot.mentor_session()  # Start the mentor session